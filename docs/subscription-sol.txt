// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract Subscription is ReentrancyGuard, Ownable {
    address public usdcAddress;
    mapping(address => uint256) public subscriptions; // Expiry timestamp
    uint256 public constant SUBSCRIPTION_FEE = 5 * 10**6; // $5 in USDC (6 decimals)
    uint256 public constant SUBSCRIPTION_DURATION = 30 days;

    event Subscribed(address indexed user, uint256 expiry);

    constructor(address _usdcAddress) Ownable(msg.sender) {
        usdcAddress = _usdcAddress;
    }

    function subscribe() external nonReentrant {
        require(IERC20(usdcAddress).transferFrom(msg.sender, owner(), SUBSCRIPTION_FEE), "Transfer failed");
        subscriptions[msg.sender] = block.timestamp + SUBSCRIPTION_DURATION;
        emit Subscribed(msg.sender, subscriptions[msg.sender]);
    }

    function isSubscribed(address user) external view returns (bool) {
        return subscriptions[user] > block.timestamp;
    }
}

interface IERC20 {
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}